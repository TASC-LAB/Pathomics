#!/usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    May 15, 2024 12:31:02 AM +0300  platform: Windows NT

# Standard library modules.
import os
import random
import tkinter
import functools
import threading
import configparser

# Local modules.
import gui
import ROI
import inputs
import QuPath
import Pathomics
import Normalization

##############################
# CONSTANTS                  #
##############################
ASSETS_PATH         = ".\\Assets"
CONFIG_FILE_NAME    = "Settings.cfg"
QUPATH_PARAMS_FILE  = "qupath_parameters.json"
QUPATH_GROOVY_FILE  = "nucleus_detection_wargs.groovy"
QUPATH_PROGRAM_PATH = "C:\\Users\\Lior\\AppData\\Local\\QuPath-0.5.1\\QuPath-0.5.1.exe"
SUMMARY_TABLE_NAME  = "Summary_Table.csv"

##############################
# MAIN                       #
##############################
def main():
    root = tkinter.Tk()
    root.protocol('WM_DELETE_WINDOW', root.destroy)

    # Create a configuration object and implement convinience method.
    config = configparser.ConfigParser()
    config.set("DEFAULT", "configfile",          CONFIG_FILE_NAME)
    config.set("DEFAULT", "qupath_program_path", QUPATH_PROGRAM_PATH)
    config.set("DEFAULT", "summary_table_file",  SUMMARY_TABLE_NAME)
    config.set("DEFAULT", "qupath_groovy_path",  os.path.join(ASSETS_PATH, QUPATH_GROOVY_FILE))
    config.set("DEFAULT", "qupath_params_path",  os.path.join(ASSETS_PATH, QUPATH_PARAMS_FILE))
    config.set("DEFAULT", "seed",                "1")
    random.seed(config.getint("DEFAULT", "seed"))

    # Creates a toplevel widget.
    window = gui.PathomicsGUI(root, config, assets=ASSETS_PATH)
    window.threads = {}
    window.mutex   = threading.Lock()

    # Assign functionality
    window.btnLocal.configure(command=functools.partial(inputs.load_local, window))
    window.btnNormTrainModel.configure(command=functools.partial(Normalization.norm_train, window))
    window.btnNormLoadModel.configure(command=functools.partial(Normalization.norm_load, window))
    window.btnNormalize.configure(command=functools.partial(Normalization.norm, window))
    window.btnROITrainModel.configure(command=functools.partial(ROI.roi_train, window))
    window.btnROILoadModel.configure(command=functools.partial(ROI.roi_load, window))
    window.btnROIFilter.configure(command=functools.partial(ROI.roi, window))
    window.btnQuPathParams.configure(command=functools.partial(QuPath.qupath_params, window))
    window.btnQuPathAnalysis.configure(command=functools.partial(QuPath.qupath_analyze, window))
    # TODO: Stopped here ---------------
    window.btnTrainPathomics.configure(command=functools.partial(Pathomics.pathomics_train, window))
    window.btnIntensity.configure(command=functools.partial(Normalization.intensity_dist, window))
    window.btnPCA.configure(command=functools.partial(Pathomics.pca_show, window))
    window.btnKMeans.configure(command=functools.partial(Pathomics.kmeans_show, window))
    window.btnCOX.configure(command=functools.partial(Pathomics.cox_analysis_show, window))
    window.btnFeatures.configure(command=functools.partial(Pathomics.features_show, window))
    window.btnAnova.configure(command=functools.partial(Pathomics.anova_show, window))
    window.btnKaplanMeier.configure(command=functools.partial(Pathomics.kaplan_meier_show, window))
    window.btnQTLResults.configure(command=functools.partial(Pathomics.qtl_show, window))
    window.btnGenerate.configure(command=functools.partial(Pathomics.generate_report, window))

    # Run GUI.
    root.mainloop()

if __name__ == '__main__':
    main()